#!/usr/bin/env bash
set -euo pipefail

#Keep it in alphabetical order
DE_PACKAGES="i3 i3-blocks nm-applets"
SHELL_PACKAGES="curl git zsh neovim emacs tmux ripgrep fzf"
BOOTSTRAP_DIR="$(dirname "$0")"

RED=$(printf '\033[31m')
GREEN=$(printf '\033[32m')
YELLOW=$(printf '\033[33m')
BLUE=$(printf '\033[34m')
BOLD=$(printf '\033[1m')
RESET=$(printf '\033[m')

#Flags
INSTALL_DE="${INSTALL_DE:-none}"

#------------Help------------#
help(){
    echo ""
    echo "A bootstrap script for YADM, this installs all dependencies for my dotfiles"
    echo "Note that YADM should call this script automatically, no need to call it again, unless there is an update"
    echo "It can install the main packages which consists of:"
    echo "      $SHELL_PACKAGES"
    echo "And include the destop environment packages wich are the main package plus:"
    echo "      $DE_PACKAGES"
    echo ""

    echo "Usage:"
    echo "      -h or --help to show this screen"
    echo "      -i or --install 'all/main' for installing all packages or main only packages"
    echo "              or can be done having the INSTALL_DE env to true/false to install all or shell only since yadm does not pass arguments"
    echo ""
}

echo_info() {
    echo "${BLUE}$@${RESET}"
}

echo_error(){
    echo "${RED}$@${RESET}" >&2
}

#------------Package installers------------#

remove_comments(){
    for var in "$@"
    do
        while read -r line; do
            [[ "$line" =~ ^#.*$ ]] && continue
            echo "${line}"
        done < "$var"
    done
}

get_package_list() {
    if [[ "$INSTALL_DE" == "true" ]]; then
        echo "$(remove_comments $BOOTSTRAP_DIR/packages/main_packages $BOOTSTRAP_DIR/packages/de_packages)"
    else
        echo "$(remove_comments $BOOTSTRAP_DIR/packages/main_packages)"
    fi
}

apt_install(){
    echo_info "Detected apt (Ubuntu/Debian)"
    $BOOTSTRAP_DIR/scripts/packages/apt.sh "$@"
}

zypper_install(){
    echo_info "Detected zypper (OpenSuse <3)"
    $BOOTSTRAP_DIR/scripts/packages/zypper.sh "$@"
}

dnf_install(){
    echo_info "Detected dnf (Fedora/RHEL)"
    $BOOTSTRAP_DIR/scripts/packages/dnf.sh "$@"
}


install_packages(){
    packages=$(get_package_list)
    #Debian, ubuntu or derivatives
    if hash 2>/dev/null apt-get ; then
        apt_install $packages
    #Suse or derivatives
    elif hash 2>/dev/null zypper ; then
        zypper_install $packages
    #Fedora/Centos8+/RHEL
    elif hash 2>/dev/null dnf ; then
        dnf_install $packages
    #Fails
    else
        echo_error "Your package manager is not supported" 
        exit 1
    fi
}

#------------Config installers------------#
install_doom_emacs(){
    $BOOTSTRAP_DIR/scripts/config_installers/doom.sh
}

install_zsh_config(){
    $BOOTSTRAP_DIR/scripts/config_installers/zsh.sh
}

#------------Main------------#
exec() {

    if [[ "$INSTALL_DE" == "true" || "$INSTALL_DE" == "false" ]]; then
        echo_info "Installing desktop environment packages"
    else
        echo "${YELLOW}Only main packages or all packages (including DE tools) can be installed."
        echo "Install all packages? [Y/n]${RESET}"
        read opt
        case $opt in
            y*|Y*|"") 
                echo_info "Installing all packages";
                INSTALL_DE="true";;
            n*|N*) 
                echo_info "Installing main packages";
                INSTALL_DE="false";;
            *) echo_error "Invalid choice. Exiting"; exit 1 ;;
	    esac  
    fi

    echo_info "Installing packages (This may take a while)"
    install_packages

    echo_info "Installing doom emacs"
    install_doom_emacs

    echo_info "Installing zsh"
    install_zsh_config

    echo_info "Installing nvim"
    install_nvim_config

    zsh -l
}


#------------Argument parsing------------#
PARAMS=""
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -h|--help)
        help
        exit 0
        ;;
    -i|--install)
        if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            if [ "$2" == "all" ]; then
                INSTALL_DE="true"
            elif [ "$2" == "main" ]; then
                INSTALL_DE="false"
            fi
            shift 2
        else
            echo_error "Error: Argument for $1 is missing" >&2
            exit 1
        fi
        ;;
    -*|--*=) # unsupported flags
        echo_error "Error: Unsupported flag $1" >&2
        exit 1
        ;;
    *) # preserve positional arguments
        PARAMS="$PARAMS $1"
        shift
        ;;
    esac
done #set positional arguments in their proper place
eval set -- "$PARAMS"

#------------Programm exec------------
exec
