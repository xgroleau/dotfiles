#!/bin/bash

#Keep it in alphabetical order
GUI_PACKAGES="emacs"
SHELL_PACKAGES="curl git zsh neovim tmux" 

RED=$(printf '\033[31m')
GREEN=$(printf '\033[32m')
YELLOW=$(printf '\033[33m')
BLUE=$(printf '\033[34m')
BOLD=$(printf '\033[1m')
RESET=$(printf '\033[m')

#Flags
INSTALL_GUI="${INSTALL_GUI:-none}"
PACKAGES=""

#------------Help------------#
help(){
    echo ""
    echo "A bootstrap script for YADM, this installs all dependencies for my dotfiles"
    echo "Note that YADM should call this script automatically, no need to call it again, unless there is an update"
    echo "This install ${GUI_PACKAGES} ${SHELL_PACKAGES} spacemacs and powerlevel10k"
    echo ""

    echo "Usage:"
    echo "      -h or --help to show this scree"
    echo "      -i or --install 'all/shell' for installing all packages or shell only packages"
    echo "              or can be done having the INSTALL_GUI env to true/false to install all or shell only since yadm does not pass arguments"
    echo ""
}

echo_info() {
    echo "${BLUE}$@${RESET}"
}

echo_error(){
    echo "${RED}$@${RESET}" >&2
}

#------------Package installers------------#
apt_install(){
    echo_info "Detected Ubuntu/Debian"

    echo_info "Updating repo"
    sudo apt-get update

    echo_info "Installing apps"
    sudo apt-get -y install $PACKAGES
}

zypper_install(){
    echo_info "Detected opensuse"

    echo_info "Updating repo"
    sudo zypper ref

    echo_info "Installing apps"
    sudo zypper in -y $PACKAGES
}

dnf_install(){
    echo_info "Detected Fedora"
    
    echo_info "Updating repo"
    sudo dnf check-update

    echo_info "Installing apps"
    sudo dnf -y in $PACKAGES
}

yum_install(){
    echo_info "Detected CentOS/RHEL"

    echo_info "Updating repo"
    sudo yum check-update

    echo_info "Installing apps"
    #Adding repo for neovim
    sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    sudo yum -y install $PACKAGES 

}

install_packages(){
    #Debian, ubuntu or derivatives
    if hash 2>/dev/null apt-get ; then
        apt_install
    #Suse or derivatives
    elif hash 2>/dev/null zypper ; then
        zypper_install
    #Fedora/Centos8+/RHEL
    elif hash 2>/dev/null dfn ; then
        dnf_install
    #CentOS7-
    elif hash 2>/dev/null yum ; then
        yum_install
    #Fails
    else
        echo_error "Your package manager is not supported" 
        exit 1
    fi
}

#------------Config installers------------#
install_spacemacs(){
    git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
    git -C ~/.emacs.d checkout develop
}

install_zsh_config(){
    curl --proto '=https' --tlsv1.2 -sSfL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh > /tmp/oh-my-zsh
    chmod +x /tmp/oh-my-zsh

    #Executing oh-my-zsh
    export RUNZSH="no"
    /tmp/oh-my-zsh --keep-zshrc

    #Installing zsh plugins
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
}
install_nvim_config(){
    curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	nvim -es -u init.vim -i NONE -c "PlugInstall" -c "qa"
}

#------------Main------------#
exec() {

    if [[ "$INSTALL_GUI" == "true" || "$INSTALL_GUI" == "false" ]]; then
        echo_info "Installing $INSTALL_GUI packages"
    else
        echo "${YELLOW}Only shell packages or all packages (including GUI tools) can be installed." 
        echo "Install all packages? [Y/n]${RESET}"
        read opt
        case $opt in
            y*|Y*|"") 
                echo_info "Installing all packages";
                INSTALL_GUI="true";;
            n*|N*) 
                echo_info "Installing shell packages"; 
                INSTALL_GUI="false";;
            *) echo_error "Invalid choice. Exiting"; exit 1 ;;
	    esac  
    fi

    if [[ "$INSTALL_GUI" == "true" ]]; then
        PACKAGES="$SHELL_PACKAGES $GUI_PACKAGES"
    else
        PACKAGES="$SHELL_PACKAGES"
    fi


    echo_info "Installing packages (This may take a while)"
    install_packages

    if [[ "$INSTALL_GUI" == 'true' ]] ; then
        echo_info "Installing spacemacs"
        install_spacemacs
    else
        echo_info "Emacs will not be installed"
    fi

    echo_info "Installing zsh"
    install_zsh_config

    echo_info "Installing nvim"
    install_nvim_config

    zsh -l
}


#------------Argument parsing------------#
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -h|--help)
        help
        exit 0
        ;;
    -i|--install)
        if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            if [ "$2" == "all" ]; then
                INSTALL_GUI="true"
            elif [ "$2" == "shell" ]; then
                INSTALL_GUI="false"
            fi
            shift 2
        else
            echo_error "Error: Argument for $1 is missing" >&2
            exit 1
        fi
        ;;
    -*|--*=) # unsupported flags
        echo_error "Error: Unsupported flag $1" >&2
        exit 1
        ;;
    *) # preserve positional arguments
        PARAMS="$PARAMS $1"
        shift
        ;;
    esac
done #set positional arguments in their proper place
eval set -- "$PARAMS"

#------------Programm exec------------
exec
